apiVersion: v1
kind: ServiceAccount
metadata:
  name: pod-cleanup-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-cleanup-clusterrole
rules:
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-cleanup-clusterrolebinding
subjects:
- kind: ServiceAccount
  name: pod-cleanup-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: pod-cleanup-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanup-error-pods
  namespace: default
spec:
  schedule: "0 */1 * * *"  # 每小时执行一次
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: pod-cleanup-sa
          containers:
          - name: cleanup
            image: bitnami/kubectl:latest
            command:
            - /bin/sh
            - -c
            - |
              # 定义需要匹配的命名空间前缀
              PREFIXES="cattle ingress kube istio logging test"

              # 获取所有命名空间，并过滤出以指定前缀开头的命名空间
              MATCHED_NAMESPACES=$(kubectl get namespaces -o json | \
                jq -r '.items[].metadata.name' | \
                grep -E "^($(echo $PREFIXES | tr ' ' '|'))")

              # 删除 Unknown 状态的 Pod
              for NS in $MATCHED_NAMESPACES; do
                kubectl get pods -n $NS -o json | \
                jq -r '.items[] | select(.status.phase == "Unknown") | "kubectl delete pod \(.metadata.name) -n \(.metadata.namespace)"' | bash
              done

              # 删除返回非零退出码 (Failed 状态) 或 OOMKilled 的 Pod
              for NS in $MATCHED_NAMESPACES; do
                kubectl get pods -n $NS -o json | \
                jq -r '.items[] | select(
                  (.status.phase == "Failed") or 
                  (.status.containerStatuses[]? | .state.terminated?.reason == "OOMKilled")
                ) | "kubectl delete pod \(.metadata.name) -n \(.metadata.namespace)"' | bash
              done

              # 检查并清理自己生成的 Pod，只保留最新一个
              # 获取 default 命名空间中以 cleanup-error-pods 开头的 Pod
              SELF_PODS=$(kubectl get pods -n default -o json | \
                jq -r '.items[] | select(.metadata.name | startswith("cleanup-error-pods")) | .metadata.name' | \
                sort)
              
              if [ -n "$SELF_PODS" ]; then
                # 获取 Pod 总数
                TOTAL_PODS=$(echo "$SELF_PODS" | wc -l)
                if [ "$TOTAL_PODS" -gt 1 ]; then
                  # 保留最新一个（排序后最后一个），删除其余的
                  PODS_TO_DELETE=$(echo "$SELF_PODS" | head -n -1)
                  for POD in $PODS_TO_DELETE; do
                    kubectl delete pod $POD -n default
                  done
                fi
              fi
          restartPolicy: OnFailure
